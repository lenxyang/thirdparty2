import("//azer/build/templates/precompile.gni")
static_library("preprocessor") {
  sources = [
    "src/compiler/preprocessor/DiagnosticsBase.cpp",
    "src/compiler/preprocessor/DiagnosticsBase.h",
    "src/compiler/preprocessor/DirectiveHandlerBase.cpp",
    "src/compiler/preprocessor/DirectiveHandlerBase.h",
    "src/compiler/preprocessor/DirectiveParser.cpp",
    "src/compiler/preprocessor/DirectiveParser.h",
    "src/compiler/preprocessor/ExpressionParser.cpp",
    "src/compiler/preprocessor/ExpressionParser.h",
    "src/compiler/preprocessor/Input.cpp",
    "src/compiler/preprocessor/Input.h",
    "src/compiler/preprocessor/length_limits.h",
    "src/compiler/preprocessor/Lexer.cpp",
    "src/compiler/preprocessor/Lexer.h",
    "src/compiler/preprocessor/Macro.cpp",
    "src/compiler/preprocessor/Macro.h",
    "src/compiler/preprocessor/MacroExpander.cpp",
    "src/compiler/preprocessor/MacroExpander.h",
    "src/compiler/preprocessor/numeric_lex.h",
    "src/compiler/preprocessor/pp_utils.h",
    "src/compiler/preprocessor/Preprocessor.cpp",
    "src/compiler/preprocessor/Preprocessor.h",
    "src/compiler/preprocessor/SourceLocation.h",
    "src/compiler/preprocessor/Token.cpp",
    "src/compiler/preprocessor/Token.h",
    "src/compiler/preprocessor/Tokenizer.cpp",
    "src/compiler/preprocessor/Tokenizer.h",
  ]
}

config("angle_config") {
  gendir = rebase_path(target_gen_dir, ".")
  include_dirs = ["include", gendir]
}

config("translator_config") {
  include_dirs = ["include"]
  defines = ["ANGLE_TRANSLATOR_STATIC"]
}

action("commit_id") {
  gendir = rebase_path(target_gen_dir, root_build_dir)
  script = "src/commit_id.py"
  outputs = ["$target_gen_dir/commit.h"]
  args = ["$gendir/commit.h"]
}

static_library("translator") {
  sources = [
    "src/compiler/translator/BaseTypes.h",
    "src/compiler/translator/BuiltInFunctionEmulator.cpp",
    "src/compiler/translator/BuiltInFunctionEmulator.h",
    "src/compiler/translator/CodeGen.cpp",
    "src/compiler/translator/Common.h",
    "src/compiler/translator/Compiler.cpp",
    "src/compiler/translator/compilerdebug.cpp",
    "src/compiler/translator/compilerdebug.h",
    "src/compiler/translator/ConstantUnion.h",
    "src/compiler/translator/depgraph/DependencyGraph.cpp",
    "src/compiler/translator/depgraph/DependencyGraph.h",
    "src/compiler/translator/depgraph/DependencyGraphBuilder.cpp",
    "src/compiler/translator/depgraph/DependencyGraphBuilder.h",
    "src/compiler/translator/depgraph/DependencyGraphOutput.cpp",
    "src/compiler/translator/depgraph/DependencyGraphOutput.h",
    "src/compiler/translator/depgraph/DependencyGraphTraverse.cpp",
    "src/compiler/translator/DetectCallDepth.cpp",
    "src/compiler/translator/DetectCallDepth.h",
    "src/compiler/translator/DetectDiscontinuity.cpp",
    "src/compiler/translator/DetectDiscontinuity.h",
    "src/compiler/translator/Diagnostics.cpp",
    "src/compiler/translator/Diagnostics.h",
    "src/compiler/translator/DirectiveHandler.cpp",
    "src/compiler/translator/DirectiveHandler.h",
    "src/compiler/translator/ExtensionBehavior.h",
    "src/compiler/translator/ForLoopUnroll.cpp",
    "src/compiler/translator/ForLoopUnroll.h",
    "src/compiler/translator/generate_parser.sh",
    "src/compiler/translator/glslang.h",
    "src/compiler/translator/glslang_lex.cpp",
    "src/compiler/translator/glslang_tab.cpp",
    "src/compiler/translator/glslang_tab.h",
    "src/compiler/translator/HashNames.h",
    "src/compiler/translator/InfoSink.cpp",
    "src/compiler/translator/InfoSink.h",
    "src/compiler/translator/Initialize.cpp",
    "src/compiler/translator/Initialize.h",
    "src/compiler/translator/InitializeDll.cpp",
    "src/compiler/translator/InitializeDll.h",
    "src/compiler/translator/InitializeGlobals.h",
    "src/compiler/translator/InitializeParseContext.cpp",
    "src/compiler/translator/InitializeParseContext.h",
    "src/compiler/translator/InitializeVariables.cpp",
    "src/compiler/translator/InitializeVariables.h",
    "src/compiler/translator/Intermediate.cpp",
    "src/compiler/translator/intermediate.h",
    "src/compiler/translator/intermOut.cpp",
    "src/compiler/translator/IntermTraverse.cpp",
    "src/compiler/translator/localintermediate.h",
    "src/compiler/translator/MapLongVariableNames.cpp",
    "src/compiler/translator/MapLongVariableNames.h",
    "src/compiler/translator/MMap.h",
    "src/compiler/translator/NodeSearch.h",
    "src/compiler/translator/osinclude.h",
    "src/compiler/translator/OutputESSL.cpp",
    "src/compiler/translator/OutputESSL.h",
    "src/compiler/translator/OutputGLSL.cpp",
    "src/compiler/translator/OutputGLSL.h",
    "src/compiler/translator/OutputGLSLBase.cpp",
    "src/compiler/translator/OutputGLSLBase.h",
    "src/compiler/translator/OutputHLSL.cpp",
    "src/compiler/translator/OutputHLSL.h",
    "src/compiler/translator/parseConst.cpp",
    "src/compiler/translator/ParseContext.cpp",
    "src/compiler/translator/ParseContext.h",
    "src/compiler/translator/PoolAlloc.cpp",
    "src/compiler/translator/PoolAlloc.h",
    "src/compiler/translator/Pragma.h",
    "src/compiler/translator/QualifierAlive.cpp",
    "src/compiler/translator/QualifierAlive.h",
    "src/compiler/translator/RemoveTree.cpp",
    "src/compiler/translator/RemoveTree.h",
    "src/compiler/translator/RenameFunction.h",
    "src/compiler/translator/RewriteElseBlocks.cpp",
    "src/compiler/translator/RewriteElseBlocks.h",
    "src/compiler/translator/SearchSymbol.cpp",
    "src/compiler/translator/SearchSymbol.h",
    "src/compiler/translator/ShaderLang.cpp",
    "src/compiler/translator/ShHandle.h",
    "src/compiler/translator/SymbolTable.cpp",
    "src/compiler/translator/SymbolTable.h",
    "src/compiler/translator/timing/RestrictFragmentShaderTiming.cpp",
    "src/compiler/translator/timing/RestrictFragmentShaderTiming.h",
    "src/compiler/translator/timing/RestrictVertexShaderTiming.cpp",
    "src/compiler/translator/timing/RestrictVertexShaderTiming.h",
    "src/compiler/translator/TranslatorESSL.cpp",
    "src/compiler/translator/TranslatorESSL.h",
    "src/compiler/translator/TranslatorGLSL.cpp",
    "src/compiler/translator/TranslatorGLSL.h",
    "src/compiler/translator/TranslatorHLSL.cpp",
    "src/compiler/translator/TranslatorHLSL.h",
    "src/compiler/translator/Types.h",
    "src/compiler/translator/UnfoldShortCircuit.cpp",
    "src/compiler/translator/UnfoldShortCircuit.h",
    "src/compiler/translator/UnfoldShortCircuitAST.cpp",
    "src/compiler/translator/UnfoldShortCircuitAST.h",
    "src/compiler/translator/Uniform.cpp",
    "src/compiler/translator/Uniform.h",
    "src/compiler/translator/util.cpp",
    "src/compiler/translator/util.h",
    "src/compiler/translator/ValidateLimitations.cpp",
    "src/compiler/translator/ValidateLimitations.h",
    "src/compiler/translator/VariableInfo.cpp",
    "src/compiler/translator/VariableInfo.h",
    "src/compiler/translator/VariablePacker.cpp",
    "src/compiler/translator/VariablePacker.h",
    "src/compiler/translator/VersionGLSL.cpp",
    "src/compiler/translator/VersionGLSL.h",
    "src/third_party/compiler/ArrayBoundsClamper.cpp",
    "src/third_party/compiler/ArrayBoundsClamper.h",
  ]

  if (is_win) {
    sources += ["src/compiler/translator/ossource_win.cpp"]
  } else {
    sources += ["src/compiler/translator/ossource_posix.cpp"]
  }

  include_dirs = ["src"]
  deps = [":preprocessor"]
  direct_dependent_configs = [":translator_config"]
}

config("angle_libGLESv2_config") {
  pchdir = rebase_path("$target_gen_dir", "$root_build_dir", ".")
  include_dirs = ["$pchdir", "include", "src"]
}

source_set("angle_common") {
  sources = [
    "src/common/angleutils.h",
    "src/common/debug.cpp",
    "src/common/debug.h",
    "src/common/event_tracer.cpp",
    "src/common/event_tracer.h",
    "src/common/RefCountObject.cpp",
    "src/common/RefCountObject.h",
    "src/common/version.h",
    "src/third_party/murmurhash/MurmurHash3.cpp",
    "src/third_party/murmurhash/MurmurHash3.h",
  ]
  include_dirs = ["src", "include"]
}

libGLESv2_sources = [
  "src/libGLESv2/angletypes.h",
  "src/libGLESv2/BinaryStream.h",
  "src/libGLESv2/Buffer.cpp",
  "src/libGLESv2/Buffer.h",
  "src/libGLESv2/Constants.h",
  "src/libGLESv2/Context.cpp",
  "src/libGLESv2/Context.h",
  "src/libGLESv2/Fence.cpp",
  "src/libGLESv2/Fence.h",
  "src/libGLESv2/Float16ToFloat32.cpp",
  "src/libGLESv2/Float16ToFloat32.py",
  "src/libGLESv2/Framebuffer.cpp",
  "src/libGLESv2/Framebuffer.h",
  "src/libGLESv2/HandleAllocator.cpp",
  "src/libGLESv2/HandleAllocator.h",
  "src/libGLESv2/libGLESv2.cpp",
  "src/libGLESv2/libGLESv2.rc",
  "src/libGLESv2/main.cpp",
  "src/libGLESv2/main.h",
  "src/libGLESv2/mathutil.h",
  "src/libGLESv2/precompiled.cpp",
  "src/libGLESv2/precompiled.h",
  "src/libGLESv2/Program.cpp",
  "src/libGLESv2/Program.h",
  "src/libGLESv2/ProgramBinary.cpp",
  "src/libGLESv2/ProgramBinary.h",
  "src/libGLESv2/Query.cpp",
  "src/libGLESv2/Query.h",
  "src/libGLESv2/Renderbuffer.cpp",
  "src/libGLESv2/Renderbuffer.h",
  "src/libGLESv2/renderer/BufferStorage.cpp",
  "src/libGLESv2/renderer/BufferStorage.h",
  "src/libGLESv2/renderer/d3d11",
  "src/libGLESv2/renderer/d3d11/BufferStorage11.cpp",
  "src/libGLESv2/renderer/d3d11/BufferStorage11.h",
  "src/libGLESv2/renderer/d3d11/Fence11.cpp",
  "src/libGLESv2/renderer/d3d11/Fence11.h",
  "src/libGLESv2/renderer/d3d11/Image11.cpp",
  "src/libGLESv2/renderer/d3d11/Image11.h",
  "src/libGLESv2/renderer/d3d11/IndexBuffer11.cpp",
  "src/libGLESv2/renderer/d3d11/IndexBuffer11.h",
  "src/libGLESv2/renderer/d3d11/InputLayoutCache.cpp",
  "src/libGLESv2/renderer/d3d11/InputLayoutCache.h",
  "src/libGLESv2/renderer/d3d11/Query11.cpp",
  "src/libGLESv2/renderer/d3d11/Query11.h",
  "src/libGLESv2/renderer/d3d11/Renderer11.cpp",
  "src/libGLESv2/renderer/d3d11/Renderer11.h",
  "src/libGLESv2/renderer/d3d11/renderer11_utils.cpp",
  "src/libGLESv2/renderer/d3d11/renderer11_utils.h",
  "src/libGLESv2/renderer/d3d11/RenderStateCache.cpp",
  "src/libGLESv2/renderer/d3d11/RenderStateCache.h",
  "src/libGLESv2/renderer/d3d11/RenderTarget11.cpp",
  "src/libGLESv2/renderer/d3d11/RenderTarget11.h",
  "src/libGLESv2/renderer/d3d11/ShaderExecutable11.cpp",
  "src/libGLESv2/renderer/d3d11/ShaderExecutable11.h",
  "src/libGLESv2/renderer/d3d11/shaders/Clear11.hlsl",
  "src/libGLESv2/renderer/d3d11/shaders/compiled",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/clear11vs.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/clearmultiple11ps.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/clearsingle11ps.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/passthrough11vs.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughlum11ps.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughlumalpha11ps.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgb11ps.h",
  "src/libGLESv2/renderer/d3d11/shaders/compiled/passthroughrgba11ps.h",
  "src/libGLESv2/renderer/d3d11/shaders/generate_shaders.bat",
  "src/libGLESv2/renderer/d3d11/shaders/Passthrough11.hlsl",
  "src/libGLESv2/renderer/d3d11/SwapChain11.cpp",
  "src/libGLESv2/renderer/d3d11/SwapChain11.h",
  "src/libGLESv2/renderer/d3d11/TextureStorage11.cpp",
  "src/libGLESv2/renderer/d3d11/TextureStorage11.h",
  "src/libGLESv2/renderer/d3d11/VertexBuffer11.cpp",
  "src/libGLESv2/renderer/d3d11/VertexBuffer11.h",
  "src/libGLESv2/renderer/d3d9/Blit.cpp",
  "src/libGLESv2/renderer/d3d9/Blit.h",
  "src/libGLESv2/renderer/d3d9/BufferStorage9.cpp",
  "src/libGLESv2/renderer/d3d9/BufferStorage9.h",
  "src/libGLESv2/renderer/d3d9/Fence9.cpp",
  "src/libGLESv2/renderer/d3d9/Fence9.h",
  "src/libGLESv2/renderer/d3d9/Image9.cpp",
  "src/libGLESv2/renderer/d3d9/Image9.h",
  "src/libGLESv2/renderer/d3d9/IndexBuffer9.cpp",
  "src/libGLESv2/renderer/d3d9/IndexBuffer9.h",
  "src/libGLESv2/renderer/d3d9/Query9.cpp",
  "src/libGLESv2/renderer/d3d9/Query9.h",
  "src/libGLESv2/renderer/d3d9/Renderer9.cpp",
  "src/libGLESv2/renderer/d3d9/Renderer9.h",
  "src/libGLESv2/renderer/d3d9/renderer9_utils.cpp",
  "src/libGLESv2/renderer/d3d9/renderer9_utils.h",
  "src/libGLESv2/renderer/d3d9/RenderTarget9.cpp",
  "src/libGLESv2/renderer/d3d9/RenderTarget9.h",
  "src/libGLESv2/renderer/d3d9/ShaderExecutable9.cpp",
  "src/libGLESv2/renderer/d3d9/ShaderExecutable9.h",
  "src/libGLESv2/renderer/d3d9/shaders",
  "src/libGLESv2/renderer/d3d9/shaders/Blit.ps",
  "src/libGLESv2/renderer/d3d9/shaders/Blit.vs",
  "src/libGLESv2/renderer/d3d9/shaders/compiled",
  "src/libGLESv2/renderer/d3d9/shaders/compiled/componentmaskps.h",
  "src/libGLESv2/renderer/d3d9/shaders/compiled/flipyvs.h",
  "src/libGLESv2/renderer/d3d9/shaders/compiled/luminanceps.h",
  "src/libGLESv2/renderer/d3d9/shaders/compiled/passthroughps.h",
  "src/libGLESv2/renderer/d3d9/shaders/compiled/standardvs.h",
  "src/libGLESv2/renderer/d3d9/shaders/generate_shaders.bat",
  "src/libGLESv2/renderer/d3d9/SwapChain9.cpp",
  "src/libGLESv2/renderer/d3d9/SwapChain9.h",
  "src/libGLESv2/renderer/d3d9/TextureStorage9.cpp",
  "src/libGLESv2/renderer/d3d9/TextureStorage9.h",
  "src/libGLESv2/renderer/d3d9/VertexBuffer9.cpp",
  "src/libGLESv2/renderer/d3d9/VertexBuffer9.h",
  "src/libGLESv2/renderer/d3d9/vertexconversion.h",
  "src/libGLESv2/renderer/d3d9/VertexDeclarationCache.cpp",
  "src/libGLESv2/renderer/d3d9/VertexDeclarationCache.h",
  "src/libGLESv2/renderer/FenceImpl.h",
  "src/libGLESv2/renderer/generatemip.h",
  "src/libGLESv2/renderer/Image.cpp",
  "src/libGLESv2/renderer/Image.h",
  "src/libGLESv2/renderer/ImageSSE2.cpp",
  "src/libGLESv2/renderer/IndexBuffer.cpp",
  "src/libGLESv2/renderer/IndexBuffer.h",
  "src/libGLESv2/renderer/IndexDataManager.cpp",
  "src/libGLESv2/renderer/IndexDataManager.h",
  "src/libGLESv2/renderer/IndexRangeCache.cpp",
  "src/libGLESv2/renderer/IndexRangeCache.h",
  "src/libGLESv2/renderer/QueryImpl.h",
  "src/libGLESv2/renderer/Renderer.cpp",
  "src/libGLESv2/renderer/Renderer.h",
  "src/libGLESv2/renderer/RenderTarget.h",
  "src/libGLESv2/renderer/ShaderCache.h",
  "src/libGLESv2/renderer/ShaderExecutable.h",
  "src/libGLESv2/renderer/SwapChain.h",
  "src/libGLESv2/renderer/TextureStorage.cpp",
  "src/libGLESv2/renderer/TextureStorage.h",
  "src/libGLESv2/renderer/VertexBuffer.cpp",
  "src/libGLESv2/renderer/VertexBuffer.h",
  "src/libGLESv2/renderer/VertexDataManager.cpp",
  "src/libGLESv2/renderer/VertexDataManager.h",
  "src/libGLESv2/resource.h",
  "src/libGLESv2/ResourceManager.cpp",
  "src/libGLESv2/ResourceManager.h",
  "src/libGLESv2/Shader.cpp",
  "src/libGLESv2/Shader.h",
  "src/libGLESv2/Texture.cpp",
  "src/libGLESv2/Texture.h",
  "src/libGLESv2/Uniform.cpp",
  "src/libGLESv2/Uniform.h",
  "src/libGLESv2/utilities.cpp",
  "src/libGLESv2/utilities.h",
]

# user D3D11
shared_library("libGLESv2") {
  output_name = "libAGL"
  sources = libGLESv2_sources
  sources += ["src/libGLESv2/azer.cc"]
  deps = [":translator", ":commit_id", ":angle_common"]
  defines = ["ANGLE_ENABLE_D3D11=1", "ANGLE_ENABLE_D3D9EX=0"]
  if(is_debug) { defines += ["ANGLE_ENABLE_PREF"]}
  gendir = rebase_path("$target_gen_dir", "$root_build_dir", ".")
  include_dirs = ["src", "include", "$gendir", "src/libGLESv2"]
  direct_dependent_configs = [":angle_config"]
  deffile = rebase_path("src/libGLESv2/libGLESv2.def", "$root_build_dir")
  ldflags = ["/DEF:$deffile"]
  configs += [
    "//azer/build/config:d3d11",
    "//azer/build/config:d3d9",
    ":angle_libGLESv2_config",
  ]
}

# user D3D11
shared_library("libEGL") {
  output_name = "libAEGL"
  sources = [
    "src/libEGL/Config.cpp",
    "src/libEGL/Config.h",
    "src/libEGL/Display.cpp",
    "src/libEGL/Display.h",
    "src/libEGL/libEGL.cpp",
    "src/libEGL/libEGL.rc",
    "src/libEGL/main.cpp",
    "src/libEGL/main.h",
    "src/libEGL/resource.h",
    "src/libEGL/Surface.cpp",
    "src/libEGL/Surface.h",
  ]

  direct_dependent_configs = [":angle_config"]
  libs = ["d3d9.lib"]
  
  if (is_debug) { defines = ["ANGLE_ENABLE_PERF"] }

  gendir = rebase_path("$target_gen_dir", "$root_build_dir", ".")
  include_dirs = ["src/libGLESv2", "$gendir", "src/libEGL", "src"]
  deps = [":libGLESv2", ":commit_id", ":angle_common"]
  deffile = rebase_path("src/libEGL/libEGL.def", "$root_build_dir")
  ldflags = ["/DEF:$deffile"]
}

test("preprocessor_test") {
  sources = [
    "tests/preprocessor_tests/char_test.cpp",
    "tests/preprocessor_tests/comment_test.cpp",
    "tests/preprocessor_tests/define_test.cpp",
    "tests/preprocessor_tests/error_test.cpp",
    "tests/preprocessor_tests/extension_test.cpp",
    "tests/preprocessor_tests/identifier_test.cpp",
    "tests/preprocessor_tests/if_test.cpp",
    "tests/preprocessor_tests/input_test.cpp",
    "tests/preprocessor_tests/location_test.cpp",
    "tests/preprocessor_tests/MockDiagnostics.h",
    "tests/preprocessor_tests/MockDirectiveHandler.h",
    "tests/preprocessor_tests/number_test.cpp",
    "tests/preprocessor_tests/operator_test.cpp",
    "tests/preprocessor_tests/pragma_test.cpp",
    "tests/preprocessor_tests/PreprocessorTest.cpp",
    "tests/preprocessor_tests/PreprocessorTest.h",
    "tests/preprocessor_tests/preprocessor_test_main.cpp",
    "tests/preprocessor_tests/space_test.cpp",
    "tests/preprocessor_tests/token_test.cpp",
    "tests/preprocessor_tests/version_test.cpp",
  ]
  deps = [
    "//testing/gtest",
    "//testing/gmock",
  ]
}